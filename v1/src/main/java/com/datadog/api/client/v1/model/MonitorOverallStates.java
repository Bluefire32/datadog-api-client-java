/*
 * (C) Datadog, Inc. 2019
 * All rights reserved
 * Licensed under a 3-clause BSD style license (see LICENSE)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.client.v1.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets MonitorOverallStates
 */
@JsonAdapter(MonitorOverallStates.Adapter.class)
public enum MonitorOverallStates {
  
  OK("OK"),
  
  WARN("Warn"),
  
  ALERT("Alert"),
  
  NO_DATA("No Data"),
  
  IGNORED("Ignored"),
  
  SKIPPED("Skipped"),
  
  UNKNOWN("Unknown");

  private String value;

  MonitorOverallStates(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static MonitorOverallStates fromValue(String value) {
    for (MonitorOverallStates b : MonitorOverallStates.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<MonitorOverallStates> {
    @Override
    public void write(final JsonWriter jsonWriter, final MonitorOverallStates enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public MonitorOverallStates read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return MonitorOverallStates.fromValue(value);
    }
  }
}

