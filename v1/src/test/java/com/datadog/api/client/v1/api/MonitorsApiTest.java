/*
 * (C) Datadog, Inc. 2019
 * All rights reserved
 * Licensed under a 3-clause BSD style license (see LICENSE)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.client.v1.api;

import com.datadog.api.client.v1.ApiException;
import com.datadog.api.client.v1.model.Error400;
import com.datadog.api.client.v1.model.Error401;
import com.datadog.api.client.v1.model.Error403;
import com.datadog.api.client.v1.model.Error404;
import com.datadog.api.client.v1.model.Monitor;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MonitorsApi
 */
@Ignore
public class MonitorsApiTest {

    private final MonitorsApi api = new MonitorsApi();

    
    /**
     * Delete the specified monitor.
     *
     * ### Overview Delete the specified monitor ### Arguments * **&#x60;monitor_id&#x60;** [*required*]: The id of the monitor.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteMonitorTest() throws ApiException {
        Long monitorId = null;
        Map<String, Long> response = api.deleteMonitor(monitorId);

        // TODO: test validations
    }
    
    /**
     * Edit the specified monitor
     *
     * ### Overview Edit the specified monitor. ### Arguments * **&#x60;monitor_id&#x60;** [*required*]: The id of the monitor.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editMonitorTest() throws ApiException {
        Long monitorId = null;
        Monitor monitor = null;
        Monitor response = api.editMonitor(monitorId, monitor);

        // TODO: test validations
    }
    
    /**
     * Get details about the specified monitor.
     *
     * ### Overview Get details about the specified monitor from your organization. ### Arguments * **&#x60;monitor_id&#x60;** [*required*]: The id of the monitor. * **&#x60;group_states&#x60;** [*optional* *default*&#x3D;**None**] If this argument is set, the returned data includes additional information (if available) regarding the specified group states, including the last notification timestamp, last resolution timestamp and details about the last time the monitor was triggered. The argument should include a string list indicating what, if any, group states to include. Choose one or more from all, alert, warn, or no data. Example &#39;alert,warn&#39;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMonitorTest() throws ApiException {
        Long monitorId = null;
        String groupStates = null;
        Monitor response = api.getMonitor(monitorId, groupStates);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * ### Overview Validate the monitor provided in the request ### Arguments * **&#x60;Monitor&#x60;** [*required*] The Monitor Object to validate summary: Validate the provided monitor
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateMonitorTest() throws ApiException {
        Monitor monitor = null;
        Monitor response = api.validateMonitor(monitor);

        // TODO: test validations
    }
    
}
